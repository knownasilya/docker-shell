{"version":3,"sources":["../lib/index.js"],"names":["debug","DockerShell","constructor","options","containerImage","run","cmd","slave","container","docker","image","e","kill","bind","console","log","code","spawn","error","Error","destroy","process","on","reason","promise"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,MAAMA,QAAQ,qBAAW,oBAAX,CAAd;;AAEe,MAAMC,WAAN,CAAkB;AAC/BC,cAAYC,UAAU,EAAtB,EAA0B;AACxB,SAAKC,cAAL,GAAsBD,QAAQC,cAAR,IAA0B,aAAhD;AACD;;AAEKC,KAAN,CAAUC,GAAV,EAAe;AAAA;;AAAA;AACb,UAAIC,KAAJ;;AAEA,UAAI;AACF,YAAI,MAAKC,SAAT,EAAoB;AAClBR,gBAAM,eAAN;AACAO,kBAAQ,MAAM,sBAAO,MAAKC,SAAZ,EAAuB,IAAvB,CAAd;AACD,SAHD,MAGO;AACLR,gBAAM,eAAN;AACA,cAAIS,SAAS,MAAM,oBAAK,EAAL,CAAnB;;AAEAF,kBAAQ,MAAM,qBAAYE,MAAZ,EAAoB;AAChCC,mBAAO,MAAKN;AADoB,WAApB,CAAd;AAGD;AACDJ,cAAM,mBAAN;AACA;AACD,OAdD,CAcE,OAAMW,CAAN,EAAS;AACT,cAAMA,CAAN;AACD;;AAED,YAAKC,IAAL,GAAYL,MAAMK,IAAN,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,YAAM;AAAEC,gBAAQC,GAAR,CAAY,kBAAZ;AAAiC,OAA/D,EAAiER,MAAMC,SAAvE,CAAZ;;AAGAR,YAAM,cAAN;AACA,UAAI;AACF,YAAIgB,OAAO,MAAM,mBAAIT,MAAMU,KAAV,EAAiBX,GAAjB,CAAjB;AACAN,cAAM,KAAN,EAAagB,IAAb;AACA,YAAIE,QAAQF,OAAO,CAAnB;;AAEA,YAAIE,KAAJ,EAAW;AACT,gBAAM,IAAIC,KAAJ,CAAW,oBAAmBH,IAAK,EAAnC,CAAN;AACD;AACF,OARD,CAQE,OAAML,CAAN,EAAS;AACTG,gBAAQC,GAAR,CAAYJ,CAAZ;AACA,cAAMA,CAAN;AACD;AApCY;AAqCd;;AAEDS,YAAU;AACR,QAAI,KAAKR,IAAT,EAAe;AACb,WAAKA,IAAL;AACD;AACF;AAhD8B;;kBAAZX,W;AAmDrBoB,QAAQC,EAAR,CAAW,oBAAX,EAAiC,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACzDV,UAAQC,GAAR,CAAYQ,MAAZ;AACD,CAFD","file":"index.js","sourcesContent":["import init from './init';\nimport createSlave from './slave';\nimport attach from './attach';\nimport run from './run';\nimport setupDebug from 'debug';\n\nconst debug = setupDebug('docker-shell:index');\n\nexport default class DockerShell {\n  constructor(options = {}) {\n    this.containerImage = options.containerImage || 'node:alpine';\n  }\n\n  async run(cmd) {\n    let slave;\n\n    try {\n      if (this.container) {\n        debug('has container');\n        slave = await attach(this.container, true);\n      } else {\n        debug('new container');\n        let docker = await init({});\n\n        slave = await createSlave(docker, {\n          image: this.containerImage\n        });\n      }\n      debug('created container');\n      //console.log(slave.container);\n    } catch(e) {\n      throw e;\n    }\n\n    this.kill = slave.kill.bind(null, () => { console.log('killed container') }, slave.container);\n\n\n    debug('about to run');\n    try {\n      let code = await run(slave.spawn, cmd);\n      debug('ran', code);\n      let error = code > 0;\n\n      if (error) {\n        throw new Error(`exited with code ${code}`);\n      }\n    } catch(e) {\n      console.log(e);\n      throw e;\n    }\n  }\n\n  destroy() {\n    if (this.kill) {\n      this.kill();\n    }\n  }\n}\n\nprocess.on('unhandledRejection', function(reason, promise) {\n  console.log(reason);\n});\n"]}