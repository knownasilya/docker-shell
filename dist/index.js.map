{"version":3,"sources":["../lib/index.js"],"names":["debug","DockerShell","constructor","options","process","env","DOCKER_IP","Error","containerImage","run","cmd","slave","container","docker","image","e","kill","bind","console","log","split","command","args","slice","code","spawn","error","destroy","on","reason","promise"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,MAAMA,QAAQ,qBAAW,oBAAX,CAAd;;AAEe,MAAMC,WAAN,CAAkB;AAC/BC,cAAYC,UAAU,EAAtB,EAA0B;AACxB,QAAI,CAACC,QAAQC,GAAR,CAAYC,SAAjB,EAA4B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,SAAKC,cAAL,GAAsBL,QAAQK,cAAR,IAA0B,aAAhD;AACD;;AAEKC,KAAN,CAAUC,GAAV,EAAe;AAAA;;AAAA;AACb,UAAIC,KAAJ;;AAEA,UAAI;AACF,YAAI,MAAKC,SAAT,EAAoB;AAClBZ,gBAAM,eAAN;AACAW,kBAAQ,MAAM,sBAAO,MAAKC,SAAZ,EAAuB,IAAvB,CAAd;AACD,SAHD,MAGO;AACLZ,gBAAM,eAAN;AACA,cAAIa,SAAS,MAAM,oBAAK,EAAL,CAAnB;;AAEAF,kBAAQ,MAAM,qBAAYE,MAAZ,EAAoB;AAChCC,mBAAO,MAAKN;AADoB,WAApB,CAAd;AAGD;AACDR,cAAM,mBAAN;AACA;AACD,OAdD,CAcE,OAAMe,CAAN,EAAS;AACT,cAAMA,CAAN;AACD;;AAED,YAAKC,IAAL,GAAYL,MAAMK,IAAN,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,YAAM;AAAEC,gBAAQC,GAAR,CAAY,kBAAZ;AAAiC,OAA/D,EAAiER,MAAMC,SAAvE,CAAZ;;AAEA,UAAIQ,QAAQV,IAAIU,KAAJ,CAAU,GAAV,CAAZ;AACA,UAAIC,UAAUD,MAAM,CAAN,CAAd;AACA,UAAIE,OAAQF,MAAMG,KAAN,CAAY,CAAZ,CAAZ;AACAvB,YAAM,cAAN;AACA,UAAIwB,OAAO,MAAM,mBAAIb,MAAMc,KAAV,EAAiBJ,OAAjB,EAA0BC,IAA1B,CAAjB;AACAtB,YAAM,KAAN,EAAawB,IAAb;AACA,UAAIE,QAAQF,OAAO,CAAnB;;AAEA,UAAIE,KAAJ,EAAW;AACT,cAAM,IAAInB,KAAJ,CAAW,oBAAmBiB,IAAK,EAAnC,CAAN;AACD;AAjCY;AAkCd;;AAEDG,YAAU;AACR,QAAI,KAAKX,IAAT,EAAe;AACb,WAAKA,IAAL;AACD;AACF;AAjD8B;;kBAAZf,W;AAoDrBG,QAAQwB,EAAR,CAAW,oBAAX,EAAiC,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACzDZ,UAAQC,GAAR,CAAYU,MAAZ;AACD,CAFD","file":"index.js","sourcesContent":["import init from './init';\nimport createSlave from './slave';\nimport attach from './attach';\nimport run from './run';\nimport setupDebug from 'debug';\n\nconst debug = setupDebug('docker-shell:index');\n\nexport default class DockerShell {\n  constructor(options = {}) {\n    if (!process.env.DOCKER_IP) {\n      throw new Error('Need to specify (at least) DOCKER_IP env variable');\n    }\n\n    this.containerImage = options.containerImage || 'node:alpine';\n  }\n\n  async run(cmd) {\n    let slave;\n\n    try {\n      if (this.container) {\n        debug('has container');\n        slave = await attach(this.container, true);\n      } else {\n        debug('new container');\n        let docker = await init({});\n\n        slave = await createSlave(docker, {\n          image: this.containerImage\n        });\n      }\n      debug('created container');\n      //console.log(slave.container);\n    } catch(e) {\n      throw e;\n    }\n\n    this.kill = slave.kill.bind(null, () => { console.log('killed container') }, slave.container);\n\n    let split = cmd.split(' ');\n    let command = split[0];\n    let args =  split.slice(1);\n    debug('about to run');\n    let code = await run(slave.spawn, command, args);\n    debug('ran', code);\n    let error = code > 0;\n\n    if (error) {\n      throw new Error(`exited with code ${code}`);\n    }\n  }\n\n  destroy() {\n    if (this.kill) {\n      this.kill();\n    }\n  }\n}\n\nprocess.on('unhandledRejection', function(reason, promise) {\n  console.log(reason);\n});\n"]}