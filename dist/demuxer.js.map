{"version":3,"sources":["../lib/demuxer.js"],"names":["demuxer","debug","stream","stdout","stderr","buffer","Buffer","alloc","wait8","waitfor","type","read8","length","header","slice","readUInt8","readUInt32BE","readOther","toString","payload","write","demux","Writable","chunk","_","next","concat","pipe"],"mappings":";;;;;kBASwBA,O;;AAHxB;;;;AACA;;;;;;AAPA;;;;;;AAQA,MAAMC,QAAQ,qBAAW,sBAAX,CAAd;AACe,SAASD,OAAT,CAAiBE,MAAjB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;AACtD,MAAIC,SAASC,OAAOC,KAAP,CAAa,CAAb,CAAb;AACA,MAAIC,QAAQ,IAAZ;AACA,MAAIC,UAAU,CAAd;AACA,MAAIC,IAAJ;AACA,WAASC,KAAT,GAAiB;AACf,QAAI,CAACH,KAAL,EAAY;AACV;AACD;AACD,QAAIH,OAAOO,MAAP,GAAgB,CAApB,EAAuB;AACrB;AACD;AACD,UAAMC,SAASR,OAAOS,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAf;AACAT,aAASA,OAAOS,KAAP,CAAa,CAAb,CAAT;AACAJ,WAAOG,OAAOE,SAAP,CAAiB,CAAjB,CAAP;AACAN,cAAUI,OAAOG,YAAP,CAAoB,CAApB,CAAV;AACAf,UAAM,MAAN,EAAcS,IAAd;AACAT,UAAM,SAAN,EAAiBQ,OAAjB;AACAD,YAAQ,KAAR;AACD;AACD,WAASS,SAAT,GAAqB;AACnB,QAAIT,KAAJ,EAAW;AACT;AACD;AACD,QAAIH,OAAOO,MAAP,GAAgBH,OAApB,EAA6B;AAC3B;AACD;AACDR,UAAM,WAAN,EAAmBI,OAAOO,MAA1B,EAAkCP,OAAOa,QAAP,EAAlC;AACA,UAAMC,UAAUd,OAAOS,KAAP,CAAa,CAAb,EAAgBL,OAAhB,CAAhB;AACA,QAAIC,QAAQ,CAAZ,EAAe;AACbN,aAAOgB,KAAP,CAAaD,OAAb;AACD,KAFD,MAEO;AACLhB,aAAOiB,KAAP,CAAaD,OAAb;AACD;;AAEDd,aAASA,OAAOS,KAAP,CAAaL,OAAb,CAAT;AACAA,cAAU,CAAV;AACAD,YAAQ,IAAR;AACD;AACD,QAAMa,QAAQ,IAAI,iBAAEC,QAAN,CAAe;AAC3BF,UAAMG,KAAN,EAAaC,CAAb,EAAgBC,IAAhB,EAAsB;AACpBxB,YAAM,KAAN,EAAasB,MAAML,QAAN,EAAb;AACAb,eAASC,OAAOoB,MAAP,CAAc,CAACrB,MAAD,EAASkB,KAAT,CAAd,CAAT;AACA,aAAOlB,OAAOO,MAAP,IAAiBH,OAAxB,EAAiC;AAC/BE;AACAM;AACD;AACDQ;AACD;AAT0B,GAAf,CAAd;;AAYAvB,SAAOyB,IAAP,CAAYN,KAAZ;AACA,SAAOA,KAAP;AACD","file":"demuxer.js","sourcesContent":["/**\n * Taken from the docker-modem project, with a slight change to allow for\n * later \"removeListener\"\n *\n * ...okay, so what does it do?\n */\nimport setupDebug from 'debug';\nimport s from 'stream';\nconst debug = setupDebug('docker-shell:demuxer');\nexport default function demuxer(stream, stdout, stderr) {\n  let buffer = Buffer.alloc(0);\n  let wait8 = true;\n  let waitfor = 8;\n  let type;\n  function read8() {\n    if (!wait8) {\n      return;\n    }\n    if (buffer.length < 8) {\n      return;\n    }\n    const header = buffer.slice(0, 8);\n    buffer = buffer.slice(8);\n    type = header.readUInt8(0);\n    waitfor = header.readUInt32BE(4);\n    debug('type', type);\n    debug('waitfor', waitfor);\n    wait8 = false;\n  }\n  function readOther() {\n    if (wait8) {\n      return;\n    }\n    if (buffer.length < waitfor) {\n      return;\n    }\n    debug('readOther', buffer.length, buffer.toString());\n    const payload = buffer.slice(0, waitfor);\n    if (type == 2) {\n      stderr.write(payload);\n    } else {\n      stdout.write(payload);\n    }\n\n    buffer = buffer.slice(waitfor);\n    waitfor = 8;\n    wait8 = true;\n  }\n  const demux = new s.Writable({\n    write(chunk, _, next) {\n      debug('top', chunk.toString());\n      buffer = Buffer.concat([buffer, chunk]);\n      while (buffer.length >= waitfor) {\n        read8();\n        readOther();\n      }\n      next();\n    }\n  })\n\n  stream.pipe(demux);\n  return demux;\n}\n"]}